//单词分割
//基本思想：通过一个boolean数组记录是否匹配的单词，当数组最后一个值为true时，代表可以完全分割。



public static boolean wordBreak(String s, Set<String> dict) {
		int count = 0;
        boolean[] t = new boolean[s.length()+1];
        t[0] = true; //set first to be true, why?
        //Because we need initial state
 
        for(int i=0; i<s.length(); i++){
            //should continue from match position
            if(!t[i]) 
                continue;
 
            for(String a: dict){
            	System.out.println("count: " + (++count));
                int len = a.length();
                int end = i + len;
                if(end > s.length())
                    continue;
 
                if(t[end]) continue;
 
                if(s.substring(i, end).equals(a)){
                    t[end] = true;
                }
            }
        }
 
        return t[s.length()];
    }



//变种：可以看到是由什么单词分割

public static int[] wordBreak2(String s, String[] dict) {
		int count = 0;
		int[] t = new int[s.length() + 1];
		t[0] = 1;
		// Because we need initial state

		for (int i = 0; i < s.length(); i++) {
			// should continue from match position
			if (t[i] == 0)
				continue;

			for (int j = 0; j < dict.length; j++) {
				System.out.println("count: " + (++count));
				int len = dict[j].length();
				int end = i + len;
				if (end > s.length())
					continue;

				if (t[end] != 0)
					continue;

				if (s.substring(i, end).equals(dict[j])) {
					t[end] = j + 1;
				}
			}
		}
		return t;
	}